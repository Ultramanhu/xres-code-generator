## -*- coding: utf-8 -*-
<%!
import time
%><%namespace name="pb_loader" module="pb_loader"/>
// Copyright ${time.strftime("%Y")} xresloader. All rights reserved.
// Generated by xres-code-generator, please don't edit it
//

#ifndef CONFIG_EXCEL_CONFIG_SET_${loader.get_cpp_if_guard_name()}_H
#define CONFIG_EXCEL_CONFIG_SET_${loader.get_cpp_if_guard_name()}_H

#pragma once

#include <stdint.h>
#include <cstddef>
#include <functional>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <memory>
#include <cstring>

#include "spin_rw_lock.h"

#include <${pb_set.pb_include_prefix}${loader.get_pb_header_path()}>
#include <pb_header_v3.pb.h>

${pb_loader.CppNamespaceBegin(global_package)}
${loader.get_cpp_namespace_decl_begin()}

    class ${loader.get_cpp_class_name()} {
    public:
        typedef const ${loader.get_pb_inner_class_name()} item_type;
        typedef ${loader.get_pb_inner_class_name()} proto_type;
        typedef std::shared_ptr<item_type> item_ptr_type;

    public:
        ${loader.get_cpp_class_name()}();
        ~${loader.get_cpp_class_name()}();

        int on_inited();

        int load_all();

        void clear();

        const std::list<org::xresloader::pb::xresloader_data_source>& get_data_source() const;

    private:
        int load_file(const std::string& file_path);
        int load_list(const char*);
        int reload_file_lists();
        void merge_data(item_ptr_type);

    private:
        ::excel::lock::spin_rw_lock           load_file_lock_;
        std::unordered_map<std::string, bool> file_status_; // true: already loaded
        std::list<org::xresloader::pb::xresloader_data_source> datasource_;

% for code_index in loader.code.indexes:
        // ------------------------- index: ${code_index.name} -------------------------
    public:
% if code_index.is_list():
        typedef std::vector<item_ptr_type> ${code_index.name}_value_type;
        const ${code_index.name}_value_type* get_list_by_${code_index.name}(${code_index.get_key_decl()});
        item_ptr_type get_by_${code_index.name}(${code_index.get_key_decl()}, size_t index);
    private:
        const ${code_index.name}_value_type* _get_list_by_${code_index.name}(${code_index.get_key_decl()});
    public:
% else:
        typedef item_ptr_type ${code_index.name}_value_type;
        ${code_index.name}_value_type get_by_${code_index.name}(${code_index.get_key_decl()});
% endif
% if code_index.is_vector():
        typedef std::vector<${code_index.name}_value_type> ${code_index.name}_container_type;
% else:
        typedef std::map<std::tuple<${code_index.get_key_type_list()}>, ${code_index.name}_value_type> ${code_index.name}_container_type;
% endif
        const ${code_index.name}_container_type& get_all_of_${code_index.name}() const;

    private:
% if code_index.is_vector():
        ${code_index.name}_container_type ${code_index.name}_data_;
% else:
        ${code_index.name}_container_type ${code_index.name}_data_;
% endif

% endfor
    };

${loader.get_cpp_namespace_decl_end()}
${pb_loader.CppNamespaceEnd(global_package)} // ${global_package}

#endif // CONFIG_EXCEL_CONFIG_SET_${loader.get_cpp_if_guard_name()}_H
