## -*- coding: utf-8 -*-
<%!
import time
import os
%>-- Copyright ${time.strftime("%Y")} xresloader. All rights reserved.
-- Generated by xres-code-generator, please don't edit it
--

return {
% for pb_msg in pb_set.generate_message:
%   for loader in pb_msg.loaders:
  -- ======================================== ${loader.code.class_name} ========================================
  ${loader.code.class_name} = {<%
    if loader.code.file_path:
      if not isinstance(loader.code.file_path, str):
        loader_data_source = ', filePath = {' + '"{0}"'.format(
          '", "'.join([os.path.splitext(x)[0] for x in loader.code.file_path])) + '}'
      else:
        loader_data_source = ', filePath = {"' + '"{0}"'.format(os.path.splitext(loader.code.file_path)[0]) + '}'
    elif loader.code.file_list:
      loader_data_source = ', fileList = "{0}"'.format(os.path.splitext(loader.code.file_list)[0])
    else:
      loader_data_source = ''
%>
%     for code_index in loader.code.indexes:
<%
        if code_index.is_list():
          code_index_is_list = 'true'
        else:
          code_index_is_list = 'false'

        if code_index.allow_not_found:
          code_index_allow_not_found = 'true'
        else:
          code_index_allow_not_found = 'false'

        if loader.code:
          code_index_allow_not_found = 'true'
        else:
          code_index_allow_not_found = 'false'
%>      -- require("DataTableService").Get("${loader.code.class_name}"):GetByIndex("${code_index.name}", ${code_index.get_key_names()})
      { indexName = "${code_index.name}"${loader_data_source}, fullName = '${loader.full_name}', messageName = '${loader.pb_msg.name}', options = { isList = ${code_index_is_list}, allowNotFound = ${code_index_allow_not_found} }, keys = { ${code_index.get_key_names()} } },
%     endfor
  },
%   endfor
% endfor
}
