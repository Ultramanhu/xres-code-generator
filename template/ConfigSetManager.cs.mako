## -*- coding: utf-8 -*-
<%!
import time
%><%namespace name="pb_loader" module="pb_loader" />
//
// generated by xrescode on ${time.strftime("%Y-%m-%d %H:%M:%S")}, please don't edit it
//

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using Org.Xresloader.Pb;
using Google.Protobuf;

${pb_loader.CsNamespaceBegin(global_package)}

    public class ConfigSetManager {

        protected Action<string> _logHandler;
        public Action<string> LogHandler {
            get => _logHandler;
            set { 
                _logHandler = value;
                if (_logHandler == null) _logHandler = DefaultLogHandler;
            }
        }

        protected Func<string, byte[]> _loader;
        public Func<string, byte[]> Loader {
            get => _loader;
            set {
                _loader = value;
                if (_loader == null) _loader = DefaultLoader;
            }
        }

        public static byte[] DefaultLoader(string name) {
            return File.ReadAllBytes(name);
        }

        public static void DefaultLogHandler(string log) {
        }

        protected ConfigSetManager() {
            _loader = DefaultLoader;
            _logHandler = DefaultLogHandler;
            //Reload();
        }

        private static ConfigSetManager _instance;

        public static ConfigSetManager Instance {
            get { return _instance ?? (_instance = new ConfigSetManager()); }
        }
        
        public T Parse<T>(byte[] bytes, MessageParser parser) where T : class, IMessage {
            try {
                return (T)parser.ParseFrom(bytes);
            }
            catch (Exception e) {
                LogHandler?.Invoke($"ConfigSetManager Deserialize<{typeof(T).Name}> Failed, bytes sz[{bytes.Length}], Exception[{e.ToString()}] Stack:{e.StackTrace}");
                return null;
            }
        }

        public void Reload() {
            Clear();

            % for pb_msg in pb_set.generate_message:
            %   for loader in pb_msg.loaders:
            ${loader.get_cs_class_name()}.Instance.Reload();
            %   endfor
            % endfor
        }
        
        public void Clear() {
            
            % for pb_msg in pb_set.generate_message:
            %   for loader in pb_msg.loaders:
            ${loader.get_cs_class_name()}.Instance.Clear();
            %   endfor
            % endfor
        }
    }
${pb_loader.CsNamespaceEnd(global_package)} // ${global_package}

