## -*- coding: utf-8 -*-
<%!
import time
%><%namespace name="pb_loader" module="pb_loader"/>
// Copyright ${time.strftime("%Y")} xresloader. All rights reserved.
// Generated by xres-code-generator, please don't edit it
//
#ifndef CONFIG_EXCEL_EASY_API_H
#define CONFIG_EXCEL_EASY_API_H

#pragma once

#include <map>
#include <memory>
#include <vector>

#ifndef EXCEL_CONFIG_LOADER_API
#  define EXCEL_CONFIG_LOADER_API
#endif

<%
class_decls_by_package = dict()
for pb_msg in pb_set.generate_message:
  if pb_msg.pb_file.package in class_decls_by_package:
    class_decls_by_package[pb_msg.pb_file.package].append(pb_msg)
  else:
    class_decls_by_package[pb_msg.pb_file.package] = [pb_msg]
%>

% for class_decls in class_decls_by_package:
${pb_loader.CppNamespaceBegin(class_decls)}
%   for class_decl in class_decls_by_package[class_decls]:
class ${class_decl.loaders[0].code.inner_msg.name};
%   endfor
${pb_loader.CppNamespaceEnd(class_decls)}
% endfor

${pb_loader.CppNamespaceBegin(global_package)}
% for pb_msg in pb_set.generate_message:
%   for loader in pb_msg.loaders:
// ======================================== ${loader.code.class_name} ========================================
%     for code_index in loader.code.indexes:
<%
current_code_proto_ptr_type = 'std::shared_ptr<const ' + loader.get_pb_inner_class_name() + '>'
if code_index.is_list():
  current_code_item_value_type = 'std::vector<' + current_code_proto_ptr_type + ' >'
else:
  current_code_item_value_type = current_code_proto_ptr_type
%>
%       if code_index.is_vector():
EXCEL_CONFIG_LOADER_API const std::vector<${current_code_item_value_type}>&
%       else:
EXCEL_CONFIG_LOADER_API const std::map<std::tuple<${code_index.get_key_type_list()}>, ${current_code_item_value_type}>&
%       endif
  get_${loader.code.class_name}_all_of_${code_index.name}();
%       if code_index.is_list():
EXCEL_CONFIG_LOADER_API const ${current_code_item_value_type}*
  get_${loader.code.class_name}_by_${code_index.name}(${code_index.get_key_decl()});
EXCEL_CONFIG_LOADER_API ${current_code_proto_ptr_type}
  get_${loader.code.class_name}_by_${code_index.name}(${code_index.get_key_decl()}, size_t idx);
%       else:
EXCEL_CONFIG_LOADER_API ${current_code_item_value_type}
  get_${loader.code.class_name}_by_${code_index.name}(${code_index.get_key_decl()});
%       endif
%     endfor
%   endfor
% endfor
${pb_loader.CppNamespaceEnd(global_package)} // ${global_package}

#endif
