## -*- coding: utf-8 -*-
<%!
import time
%><%
cpp_include_prefix = pb_set.get_custom_variable("cpp_include_prefix", "config/excel/")
%><%namespace name="pb_loader" module="pb_loader"/>
// Copyright ${time.strftime("%Y")} xresloader. All rights reserved.
// Generated by xres-code-generator, please don't edit it
//

#pragma once

#include <memory>
#include <string>
#include <vector>

% for block_file in pb_set.get_custom_blocks("custom_config_easy_api_include"):
// include custom_config_easy_api_include: ${block_file}
<%include file="${block_file}" />
% endfor

#include "${cpp_include_prefix}config_traits.h"

#ifndef EXCEL_CONFIG_LOADER_API
#  define EXCEL_CONFIG_LOADER_API
#endif

<%
class_decls_by_package = dict()
for pb_msg in pb_set.generate_message:
  if pb_msg.pb_file.package in class_decls_by_package:
    class_decls_by_package[pb_msg.pb_file.package].append(pb_msg)
  else:
    class_decls_by_package[pb_msg.pb_file.package] = [pb_msg]
%>

% for class_decls in class_decls_by_package:
%   if class_decls:
${pb_loader.CppNamespaceBegin(class_decls)}
%   endif
%   for class_decl in class_decls_by_package[class_decls]:
class ${class_decl.loaders[0].code.inner_msg.name};
%   endfor
%   if class_decls:
${pb_loader.CppNamespaceEnd(class_decls)}
%   endif
% endfor

${pb_loader.CppNamespaceBegin(global_package)}
struct config_group_t;

#ifndef EXCEL_CONFIG_LOADER_TRAITS
#  define EXCEL_CONFIG_LOADER_TRAITS
using excel_config_type_traits = ::excel::traits::config_traits<::excel::traits::type_guard>;
#endif

const excel_config_type_traits::shared_ptr<config_group_t>& get_current_config_group() noexcept;

% for pb_msg in pb_set.generate_message:
%   for loader in pb_msg.loaders:
// ======================================== ${loader.code.class_name} ========================================
%     for code_index in loader.code.indexes:
<%
current_code_proto_ptr_type = 'excel_config_type_traits::shared_ptr<const ' + loader.get_pb_inner_class_name() + '>'
if code_index.is_list():
  current_code_item_value_type = 'excel_config_type_traits::shared_ptr<const std::vector<' + current_code_proto_ptr_type + ' > >'
else:
  current_code_item_value_type = current_code_proto_ptr_type

if code_index.is_vector():
  get_all_of_result = 'const std::vector<' + current_code_item_value_type + '>&'
else:
  get_all_of_result = 'const excel_config_type_traits::map_type<\n    std::tuple<' + code_index.get_key_type_list() + '>,\n    ' + current_code_item_value_type + ' >&'
%>
EXCEL_CONFIG_LOADER_API ${get_all_of_result}
  get_${loader.code.class_name}_all_of_${code_index.name}(const excel_config_type_traits::shared_ptr<config_group_t>&);
EXCEL_CONFIG_LOADER_API ${get_all_of_result}
  get_${loader.code.class_name}_all_of_${code_index.name}();
%       if code_index.is_list():
EXCEL_CONFIG_LOADER_API ${current_code_item_value_type}
  get_${loader.code.class_name}_by_${code_index.name}(
    const excel_config_type_traits::shared_ptr<config_group_t>&,
    ${code_index.get_key_decl()});
EXCEL_CONFIG_LOADER_API ${current_code_item_value_type}
  get_${loader.code.class_name}_by_${code_index.name}(${code_index.get_key_decl()});
EXCEL_CONFIG_LOADER_API ${current_code_proto_ptr_type}
  get_${loader.code.class_name}_by_${code_index.name}(
    const excel_config_type_traits::shared_ptr<config_group_t>&,
    ${code_index.get_key_decl()}, size_t idx);
EXCEL_CONFIG_LOADER_API ${current_code_proto_ptr_type}
  get_${loader.code.class_name}_by_${code_index.name}(${code_index.get_key_decl()}, size_t idx);
%       else:
EXCEL_CONFIG_LOADER_API ${current_code_item_value_type}
  get_${loader.code.class_name}_by_${code_index.name}(
    const excel_config_type_traits::shared_ptr<config_group_t>&,
    ${code_index.get_key_decl()});
EXCEL_CONFIG_LOADER_API ${current_code_item_value_type}
  get_${loader.code.class_name}_by_${code_index.name}(${code_index.get_key_decl()});
%       endif
%     endfor
%   endfor
% endfor
${pb_loader.CppNamespaceEnd(global_package)} // ${global_package}
