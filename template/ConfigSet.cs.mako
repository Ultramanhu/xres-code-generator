## -*- coding: utf-8 -*-
<%!
import time
%><%namespace name="pb_loader" module="pb_loader" />
//
// generated by xrescode on ${time.strftime("%Y-%m-%d %H:%M:%S")}, please don't edit it
//

using System;
using System.Text;
using System.Collections.Generic;
using Org.Xresloader.Pb;
using Google.Protobuf;

${pb_loader.CsNamespaceBegin(global_package)}

% for loader in pb_msg.loaders:
%   for code_index in loader.code.indexes:
<%   value_type_name = "" %>
## %    // ------------------------- index: ${code_index.camelname} -------------------------
    using ${code_index.camelname}ValueItemType = ${loader.get_cs_pb_inner_class_name()};
%     if code_index.is_list():
<%     value_type_name = "List<" + loader.get_cs_pb_inner_class_name() + ">" %>
    using ${code_index.camelname}ValueType = List<${loader.get_cs_pb_inner_class_name()}>;
%     else:
<%     value_type_name = loader.get_cs_pb_inner_class_name() %>
    using ${code_index.camelname}ValueType = ${loader.get_cs_pb_inner_class_name()};
%     endif

%     if code_index.is_vector():
    using ${code_index.camelname}ContainerType = List<${value_type_name}>;
%     elif len(code_index.fields) == 1:
    using ${code_index.camelname}ContainerType = Dictionary<${code_index.get_cs_key_type_list()}, ${value_type_name}>;
%     else:
    using ${code_index.camelname}ContainerType = Dictionary<ValueTuple<${code_index.get_cs_key_type_list()}>, ${value_type_name}>;
%     endif

%   endfor
% endfor

% for loader in pb_msg.loaders:
    public class ${loader.get_cs_class_name()} {

        protected ${loader.get_cs_class_name()}() {
            //Reload();
        }

        private static ${loader.get_cs_class_name()} _instance;

        public static ${loader.get_cs_class_name()} Instance {
            get { return _instance ?? (_instance = new ${loader.get_cs_class_name()}()); }
        }

        public void Reload() {
            Clear();
%   if loader.code.file_list:
            LoadByList("${loader.code.file_list}");
%   else:
            Load("${loader.code.file_path}");
%   endif
        }
        
        public void Clear() {
%   for code_index in loader.code.indexes:
             ${code_index.camelname}Data.Clear();
%   endfor
        }

        protected void LoadByList(string filelist) {
            var bytes = ConfigSetManager.Instance.Loader?.Invoke(filelist) ?? null;
            if (bytes == null) return;
            string str = Encoding.Default.GetString(bytes);
            var list = str.Split('\r', '\n');
            foreach (var filename in list) {
                if (string.IsNullOrEmpty(filename)) continue;
                Load(filename);
            }
        }

<%   outer_class_name = loader.get_cs_pb_outer_class_name() %>
        protected void Load(string name) {
            var table = ConfigSetManager.Instance.ParseByName<${outer_class_name}>(name, ${outer_class_name}.Parser);
            if (table == null) return;
            
            int count = table.${loader.get_camel_code_field_name()}.Count;
            for (var i = 0; i < count; i++)
            {
                ${code_index.camelname}ValueItemType iteminfo = ConfigSetManager.Instance.ParseByName<${code_index.camelname}ValueItemType>(table.${loader.get_camel_code_field_name()}[i].ToString(), ${code_index.camelname}ValueItemType.Parser);
                if (iteminfo == null) continue;
                MergeData(iteminfo);
            }
        }

        protected void MergeData(${code_index.camelname}ValueItemType iteminfo) {
            if (iteminfo == null) return;
%   for code_index in loader.code.indexes:
%     if len(code_index.fields) == 1:
            var key_${code_index.name} = (${code_index.get_cs_key_type_list()})iteminfo.${code_index.get_cs_key_params()};
%     else:
            var key_${code_index.name} = new ValueTuple<${code_index.get_cs_key_type_list()}>(
%       for index, fd in enumerate(code_index.fields): 
%         if index > 0:
                ,
%         endif
                (${pb_loader.MakoPbMsgGetPbFieldCsType(fd)})iteminfo.${pb_loader.MakoFirstCharUpper(fd.json_name)}
%       endfor
            );
%     endif

%     if code_index.is_vector():
            while (${code_index.camelname}Data.Count < key_${code_index.name}) ${code_index.camelname}Data.Add(iteminfo);
%     else:
%       if code_index.is_list():
            if (!${code_index.camelname}Data.ContainsKey(key_${code_index.name})) ${code_index.camelname}Data.Add(key_${code_index.name}, new ${code_index.camelname}ValueType());
%       else:
            if (!${code_index.camelname}Data.ContainsKey(key_${code_index.name})) ${code_index.camelname}Data.Add(key_${code_index.name}, iteminfo);
%       endif
%     endif

%     if code_index.is_list():
            ${code_index.camelname}Data[key_${code_index.name}].Add(iteminfo);
%     else:
            ${code_index.camelname}Data[key_${code_index.name}] = iteminfo;
%     endif
%   endfor
        }
        
%   for code_index in loader.code.indexes:
        // ------------------------- index: ${code_index.camelname} -------------------------

%     if code_index.is_list():
        public ${code_index.camelname}ValueType GetListBy${code_index.camelname}(${code_index.get_cs_key_decl()}) {
%       if code_index.is_vector():
            if (${code_index.get_cs_key_params()} < 0 || ${code_index.get_cs_key_params()} > ${code_index.camelname}Data.Count) {
                return new ${code_index.camelname}ValueType();
            }
            return ${code_index.camelname}Data[(int)${code_index.get_cs_key_params()}];
%       elif len(code_index.fields) == 1:
            ${code_index.camelname}ValueType ret = null;
            ${code_index.camelname}Data.TryGetValue(${code_index.get_cs_key_params()}, out ret);
            if (ret != null)
            {
                return ret;
            }
%         if  loader.code.file_list and code_index.file_mapping:
<%     code_line = code_index.get_cs_file_path() %>
            string file_path = ${"$\"" + code_line + "\""};
%         else:
            string file_path = "${loader.code.file_path}";
%         endif
            Load(file_path);
            ${code_index.camelname}Data.TryGetValue(${code_index.get_cs_key_params()}, out ret);
            return ret ?? new ${code_index.camelname}ValueType();
%       else:
            ValueTuple<${code_index.get_cs_key_type_list()}> key = new ValueTuple<${code_index.get_cs_key_type_list()}>(${code_index.get_cs_key_params()});
            ${code_index.camelname}ValueType ret = null;
            ${code_index.camelname}Data.TryGetValue(key, out ret);
            if (ret != null)
            {
                return ret;
            }
%         if  loader.code.file_list and code_index.file_mapping:
<%     code_line = code_index.get_cs_file_path() %>
            string file_path = ${"$\"" + code_line + "\""};
%         else:
            string file_path = "${loader.code.file_path}";
%         endif
            Load(file_path);
            ${code_index.camelname}Data.TryGetValue(key, out ret);
            return ret ?? new ${code_index.camelname}ValueType();
%       endif
        }

        public ${code_index.camelname}ValueItemType GetBy${code_index.camelname}(${code_index.get_cs_key_decl()}, int index) {
            ${code_index.camelname}ValueType list;
%       if code_index.is_vector():
            if (${code_index.get_cs_key_params()} < 0 || ${code_index.get_cs_key_params()} > ${code_index.camelname}Data.Count) {
                return null;
            }
            list = ${code_index.camelname}Data[(int)${code_index.get_cs_key_params()}];
%       elif len(code_index.fields) == 1:
            ${code_index.camelname}ValueType ret = null;
            ${code_index.camelname}Data.TryGetValue(${code_index.get_cs_key_params()}, out ret);
            if (ret == null)
            {
%         if  loader.code.file_list and code_index.file_mapping:
<%     code_line = code_index.get_cs_file_path() %>
                string file_path = ${"$\"" + code_line + "\""};
%         else:
                string file_path = "${loader.code.file_path}";
%         endif
                Load(file_path);
                ${code_index.camelname}Data.TryGetValue(${code_index.get_cs_key_params()}, out ret);
            }
            list = ret;
%       else:
            var key = new ValueTuple<${code_index.get_cs_key_type_list()}>(${code_index.get_cs_key_params()});
            ${code_index.camelname}ValueType ret = null;
            ${code_index.camelname}Data.TryGetValue(key, out ret);
            if (ret == null)
            {
%         if  loader.code.file_list and code_index.file_mapping:
<%     code_line = code_index.get_cs_file_path() %>
                string file_path = ${"$\"" + code_line + "\""};
%         else:
                string file_path = "${loader.code.file_path}";
%         endif
                Load(file_path);
                ${code_index.camelname}Data.TryGetValue(key, out ret);
            }
            list = ret;
%       endif
            if (list == null) return null;
            if (index < 0 || index > list.Count) {
                return null;
            }
            return list[index];
        }
%     else:
        public ${code_index.camelname}ValueType GetBy${code_index.camelname}(${code_index.get_cs_key_decl()}) {
%       if code_index.is_vector():
            if (${code_index.get_cs_key_params()} < 0 || ${code_index.get_cs_key_params()} > ${code_index.camelname}Data.Count) {
                return null;
            }
            return ${code_index.camelname}Data[(int)${code_index.get_cs_key_params()}];
%       elif len(code_index.fields) == 1:
            ${code_index.camelname}ValueType ret = null;
            ${code_index.camelname}Data.TryGetValue(${code_index.get_cs_key_params()}, out ret);
            if (ret != null)
            {
                return ret;
            }
%         if  loader.code.file_list and code_index.file_mapping:
<%     code_line = code_index.get_cs_file_path() %>
            string file_path = ${"$\"" + code_line + "\""};
%         else:
            string file_path = "${loader.code.file_path}";
%         endif
            Load(file_path);
            ${code_index.camelname}Data.TryGetValue(${code_index.get_cs_key_params()}, out ret);
            return ret;
%       else:
            ValueTuple<${code_index.get_cs_key_type_list()}> key = new ValueTuple<${code_index.get_cs_key_type_list()}>(${code_index.get_cs_key_params()});
            ${code_index.camelname}ValueType ret = null;
            ${code_index.camelname}Data.TryGetValue(key, out ret);
            if (ret != null)
            {
                return ret;
            }
%         if  loader.code.file_list and code_index.file_mapping:
<%     code_line = code_index.get_cs_file_path() %>
            string file_path = ${"$\"" + code_line + "\""};
%         else:
            string file_path = "${loader.code.file_path}";
%         endif
            Load(file_path);
            ${code_index.camelname}Data.TryGetValue(key, out ret);
            return ret;
%       endif
        }
%     endif
        public ${code_index.camelname}ContainerType GetAll${code_index.camelname}() {
            return ${code_index.camelname}Data;
        }

        protected ${code_index.camelname}ContainerType ${code_index.camelname}Data = new ${code_index.camelname}ContainerType();

%   endfor
    }
% endfor

${pb_loader.CsNamespaceEnd(global_package)} // ${global_package}

