## -*- coding: utf-8 -*-
<%!
import time
import os
import re
%><%namespace name="pb_loader" module="pb_loader"/><%namespace name="ue_excel_utils" module="UEExcelUtils"/><%
ue_api_definition = pb_set.get_custom_variable("ue_api_definition")
if ue_api_definition:
  ue_api_definition = ue_api_definition + " "

file_path_prefix = os.path.relpath(output_file, output_dir).replace("\\", "/")
if file_path_prefix.endswith(".h"):
  file_path_prefix = file_path_prefix[:-2]
elif file_path_prefix.endswith(".hpp"):
  file_path_prefix = file_path_prefix[:-4]
else:
  file_path_prefix = file_path_prefix

ue_excel_loader_include_rule = pb_set.get_custom_variable("ue_excel_loader_include_rule")
if not ue_excel_loader_include_rule:
  ue_excel_loader_include_rule = pb_set.get_custom_variable("ue_include_prefix", "ExcelLoader") + "/%(file_path_camelname)s.h"
%>// Copyright ${time.strftime("%Y")} xresloader. All rights reserved.
// Generated by xres-code-generator, please don't edit it
//

#pragma once

#include "CoreMinimal.h"
#include "Containers/Array.h"

#include <memory>

<%
message_include_format_files = set()
%>
% for message_inst in pb_set.generate_message:
%   if message_inst.pb_file.name not in message_include_format_files:
<%
message_include_format_files.add(message_inst.pb_file.name)
message_include_format_args = {
  "file_path_without_ext": message_inst.pb_file.get_file_path_without_ext(),
  "file_basename_without_ext": message_inst.pb_file.get_file_basename_without_ext(),
  "file_camelname": message_inst.pb_file.get_file_camelname(),
  "file_base_camelname": message_inst.pb_file.get_file_base_camelname(),
  "file_path_camelname": message_inst.pb_file.get_file_path_camelname(),
  "directory_path": message_inst.pb_file.get_directory_path(),
  "directory_camelname": message_inst.pb_file.get_directory_camelname(),
}
current_file_include_path = ue_excel_loader_include_rule % message_include_format_args
current_file_include_path = re.sub("//+", "/", current_file_include_path)
%>// class ${ue_api_definition}${ue_excel_utils.UECppUClassName(message_inst)};
#include "${current_file_include_path}"
%   endif
% endfor

#include "${os.path.basename(file_path_prefix)}.generated.h"

${pb_loader.CppNamespaceBegin(global_package)}
struct config_group_t;
${pb_loader.CppNamespaceEnd(global_package)}

UCLASS(Blueprintable, BlueprintType)
class ${ue_api_definition}${ue_excel_utils.UECppUClassNameFromString("ConfigGroupWrapper")} : public UObject
{
    GENERATED_BODY()

public:
    ${ue_excel_utils.UECppUClassNameFromString("ConfigGroupWrapper")}();

    /**
      * @brief Bind to a config group
      * @note It's a internal function, please don't call it
      * @param ConfigGroup config group
      */
    void _InternalBindConfigGroup(const std::shared_ptr<${pb_loader.CppFullPath(global_package)}config_group_t>& ConfigGroup);

% for message_inst in pb_set.generate_message:
<%
message_class_name = ue_excel_utils.UECppUClassName(message_inst)
%>
    // ======================================== ${message_class_name} ========================================
%   for loader in message_inst.loaders:
    // ---------------------------------------- ${loader.code.class_name} ----------------------------------------
%     for code_index in loader.code.indexes:
    UFUNCTION(BlueprintCallable, Category = "Excel Config ${message_class_name}")
    int64 Get${pb_loader.MakoToCamelName(loader.code.class_name)}_SizeOf_${pb_loader.MakoToCamelName(code_index.name)}();

    UFUNCTION(BlueprintCallable, Category = "Excel Config ${message_class_name}")
    TArray<${message_class_name}*> GetAll${pb_loader.MakoToCamelName(loader.code.class_name)}_Of_${pb_loader.MakoToCamelName(code_index.name)}();
%       if code_index.is_list():

    UFUNCTION(BlueprintCallable, Category = "Excel Config ${message_class_name}")
    TArray<${message_class_name}*> GetRow${pb_loader.MakoToCamelName(loader.code.class_name)}_AllOf_${pb_loader.MakoToCamelName(code_index.name)}(${ue_excel_utils.UECppGetLoaderIndexKeyDecl(message_inst, code_index)}, bool& IsValid);

    UFUNCTION(BlueprintCallable, Category = "Excel Config ${message_class_name}")
    ${message_class_name}* GetRow${pb_loader.MakoToCamelName(loader.code.class_name)}_Of_${pb_loader.MakoToCamelName(code_index.name)}(${ue_excel_utils.UECppGetLoaderIndexKeyDecl(message_inst, code_index)}, int64 Index, bool& IsValid);
%       else:

    UFUNCTION(BlueprintCallable, Category = "Excel Config ${message_class_name}")
    ${message_class_name}* GetRow${pb_loader.MakoToCamelName(loader.code.class_name)}_Of_${pb_loader.MakoToCamelName(code_index.name)}(${ue_excel_utils.UECppGetLoaderIndexKeyDecl(message_inst, code_index)}, bool& IsValid);
%       endif

%     endfor
%   endfor
% endfor
private:
    std::shared_ptr<${pb_loader.CppFullPath(global_package)}config_group_t> config_group_;
};
